Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
#  myVPC:
#    Description: VPC used to deploy our resources below
#    Type: AWS::EC2::VPC::Id
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  # instance type,
  # VPCs and so on.
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access


  UdacityS3ReadOnlyEC2:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -   Effect: Allow
              Principal:
                Service:
                  - s3.amazonaws.com
              Action:
                - sts:AssumeRole
  UdacityS3ReadOnlyEC2Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: UdacityS3ReadOnlyEC2Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -   Effect: Allow
              Action:
                - 's3:ListBucket'
                - 's3:GetObject*'
              Resource: 'arn:aws:s3:::*'
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
  UdacityVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        -   Key: name
            Value: !Sub ${EnvironmentName} VPC

#Outputs:
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
